<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>User Processing Tasks</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

  <style>
    body {
      margin: 0;
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea, #764ba2);
    }
    .form-box {
      background: #ffffff;
      padding: 35px 30px;
      border-radius: 20px;
      box-shadow: 0px 8px 25px rgba(0, 0, 0, 0.15);
      width: 100%;
      max-width: 600px;
      animation: fadeIn 0.9s ease-in-out;
    }
    .form-box h3 {
      font-weight: 700;
      margin-bottom: 20px;
      color: #333;
      text-align: center;
    }
    .badge-low { background-color: #28a745; }
    .badge-medium { background-color: #ffc107; color: #000; }
    .badge-high { background-color: #dc3545; }
    .task-item {
      border-radius: 12px;
      margin-bottom: 10px;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    .task-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(0,0,0,0.08);
    }
    .form-control {
      border-radius: 10px;
      padding: 12px;
    }
    mark.search-mark {
      background: rgba(255,230,0,0.55);
      padding: 0 3px;
      border-radius: 3px;
    }
    .no-tasks {
      text-align: center;
      color: #6c757d;
      margin-top: 12px;
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }
  </style>
</head>
<body>

<div class="form-box">
  <!-- User Info -->
  <h3>User Information</h3>
  <% if (user_info && user_info[0]) { %>
    <p><strong>Name:</strong> <%= user_info[0].user_name %></p>
    <p><strong>Mobile:</strong> <%= user_info[0].user_mobile %></p>
    <p><strong>User ID:</strong> <%= user_info[0].user_id %></p>
  <% } else { %>
    <p class="text-danger">No user found</p>
  <% } %>

  <!-- Search -->
  <div class="mb-3 mt-4">
    <input type="text" id="taskSearch" class="form-control" placeholder="🔍 Search tasks by title or details...">
  </div>

  <!-- Task Priority Filter -->
  <div class="mb-3">
    <select id="priorityFilter" class="form-control">
      <option value="">All priorities</option>
      <option value="High">High</option>
      <option value="Medium">Medium</option>
      <option value="Low">Low</option>
    </select>
  </div>

  <!-- Processing Tasks -->
  <h3 class="text-primary">Processing Tasks</h3>

  <% if (processing_task && processing_task.length > 0) { %>
    <ul class="list-group mt-3" id="taskList">
      <% processing_task.forEach(function(task) { %>
        <li class="list-group-item d-flex justify-content-between align-items-start task-item">
          <div>
            <div class="fw-semibold task-title"><%= task.task_title %></div>
            <small class="text-muted task-desc d-block"><%= task.task_details %></small>
            <small class="text-muted d-block">
              <i class="fas fa-calendar"></i> Started: <%= task.task_start_date %> |
              <i class="fas fa-calendar-plus"></i> Created: <%= task.task_entry_date %>
            </small>
          </div>
          <span class="badge 
            <% if (task.task_priority === 'High') { %> badge-high 
            <% } else if (task.task_priority === 'Medium') { %> badge-medium 
            <% } else { %> badge-low <% } %>">
            <%= task.task_priority %>
          </span>
        </li>
      <% }); %>
    </ul>
    <p id="noTasksMessage" class="no-tasks" style="display:none;">No processing tasks match your filter.</p>
  <% } else { %>
    <p class="text-muted mt-3">No processing tasks found.</p>
  <% } %>
</div>

<!-- JS: Search + Priority Filter -->
<script>
document.addEventListener('DOMContentLoaded', () => {
  const searchInput = document.getElementById('taskSearch');
  const priorityFilter = document.getElementById('priorityFilter');
  const taskList = document.getElementById('taskList');
  const noTasksMsg = document.getElementById('noTasksMessage');

  if (!taskList) return;

  const items = Array.from(taskList.querySelectorAll('.task-item'));
  items.forEach(li => {
    const titleEl = li.querySelector('.task-title');
    const descEl  = li.querySelector('.task-desc');
    const badgeEl = li.querySelector('.badge');

    li.dataset.title = titleEl ? titleEl.textContent : '';
    li.dataset.desc  = descEl  ? descEl.textContent  : '';
    li.dataset.priority = badgeEl ? badgeEl.textContent.trim() : '';
  });

  function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }

  function applyHighlight(text, term) {
    if (!term) return text;
    const esc = escapeRegExp(term);
    const regex = new RegExp(esc, 'gi');
    return text.replace(regex, match => `<mark class="search-mark">${match}</mark>`);
  }

  function filterAndHighlight() {
    const q = searchInput.value.trim().toLowerCase();
    const priority = priorityFilter.value;

    let visibleCount = 0;

    items.forEach(li => {
      const origTitle = li.dataset.title || '';
      const origDesc  = li.dataset.desc  || '';
      const itemPriority = (li.dataset.priority || '').trim();

      const matchesPriority = (priority === '' || itemPriority === priority);
      const matchesSearch = (q === '' ||
        origTitle.toLowerCase().includes(q) ||
        origDesc.toLowerCase().includes(q)
      );

      if (matchesPriority && matchesSearch) {
        li.style.display = '';
        const titleEl = li.querySelector('.task-title');
        const descEl  = li.querySelector('.task-desc');

        if (q !== '') {
          titleEl.innerHTML = applyHighlight(origTitle, q);
          descEl.innerHTML  = applyHighlight(origDesc, q);
        } else {
          titleEl.textContent = origTitle;
          descEl.textContent  = origDesc;
        }

        visibleCount++;
      } else {
        li.style.display = 'none';
        const titleEl = li.querySelector('.task-title');
        const descEl  = li.querySelector('.task-desc');
        if (titleEl) titleEl.textContent = li.dataset.title;
        if (descEl)  descEl.textContent  = li.dataset.desc;
      }
    });

    if (noTasksMsg) noTasksMsg.style.display = (visibleCount === 0 ? '' : 'none');
  }

  searchInput.addEventListener('input', filterAndHighlight);
  priorityFilter.addEventListener('change', filterAndHighlight);
  filterAndHighlight();
});
</script>

<script src="https://kit.fontawesome.com/your-fontawesome-kit.js"></script>
</body>
</html>
